# Define a map to determine the proxy target based on the requested host
# This map is defined in the http context, outside any server blocks.
map $host $proxy_target {
    hostnames; # Optimization for faster lookups

    # Specific hosts map to their respective internal ports
    staging.salesapp.ge             http://host.docker.internal:5173;
    staging-admin.salesapp.ge       http://host.docker.internal:5174;
    preproduction.salesapp.ge       http://host.docker.internal:5175;
    preproduction-admin.salesapp.ge http://host.docker.internal:5176;
    soft.salesapp.ge                http://host.docker.internal:5177;
    soft-admin.salesapp.ge          http://host.docker.internal:5178;
    staging-backend.salesapp.ge     http://host.docker.internal:8000;
    preproduction-backend.salesapp.ge http://host.docker.internal:8001;
    production-backend.salesapp.ge  http://host.docker.internal:8002;

    # salesapp.ge specifically maps to 4173
    salesapp.ge                     http://host.docker.internal:4173;

    # Default target for any host not listed above (including localhost if not mapped)
    # This handles the "unmatched request" requirement.
    default                         http://host.docker.internal:4173;
}

server {
    listen       80;
    listen  [::]:80;

    # List all server names this block should respond to.
    # Alternatively, you could use a wildcard or default_server if appropriate,
    # but explicitly listing them works fine with the map approach.
    server_name  localhost salesapp.ge staging.salesapp.ge staging-admin.salesapp.ge preproduction.salesapp.ge preproduction-admin.salesapp.ge soft.salesapp.ge soft-admin.salesapp.ge staging-backend.salesapp.ge preproduction-backend.salesapp.ge production-backend.salesapp.ge;

    # Optional: Add resolver if host.docker.internal needs DNS resolution
    # resolver 127.0.0.11 valid=10s; # Docker's internal DNS, usually not needed for host.docker.internal

    location / {
        # Use the variable set by the map directive
        proxy_pass $proxy_target;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional but recommended: Add WebSocket support if needed by your apps
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Optional but recommended: Adjust proxy timeouts and buffer sizes
        proxy_connect_timeout 60s;
        proxy_send_timeout   60s;
        proxy_read_timeout   60s;
        proxy_buffer_size    16k;
        proxy_buffers     4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Error page handling remains the same
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

# --- HTTPS Server Block (Example - Keep commented if not needed yet) ---
# If you need HTTPS, you would structure it similarly, using the same map.
# You would also need the HTTP block above to handle the initial LetsEncrypt challenge
# and/or redirect HTTP to HTTPS.

# server {
#     listen       80;
#     listen  [::]:80;
#     server_name  localhost salesapp.ge staging.salesapp.ge staging-admin.salesapp.ge preproduction.salesapp.ge preproduction-admin.salesapp.ge soft.salesapp.ge soft-admin.salesapp.ge staging-backend.salesapp.ge preproduction-backend.salesapp.ge production-backend.salesapp.ge;

#     # For LetsEncrypt certificate validation (if using http-01 challenge)
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot; # Or your certbot webroot
#     }

#     location / {
#         # Redirect all HTTP traffic to HTTPS
#         return 301 https://$host$request_uri;
#     }
# }

# server {
#     listen       443 ssl http2;
#     listen  [::]:443 ssl http2;
#     server_name  localhost salesapp.ge staging.salesapp.ge staging-admin.salesapp.ge preproduction.salesapp.ge preproduction-admin.salesapp.ge soft.salesapp.ge soft-admin.salesapp.ge staging-backend.salesapp.ge preproduction-backend.salesapp.ge production-backend.salesapp.ge;

#     # SSL Configuration
#     ssl_certificate /etc/letsencrypt/live/salesapp.ge/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/salesapp.ge/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     # Optional: Add resolver if host.docker.internal needs DNS resolution
#     # resolver 127.0.0.11 valid=10s; # Docker's internal DNS

#     location / {
#         # Use the same map variable
#         proxy_pass $proxy_target;

#         # Standard proxy headers
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         # Important: Set X-Forwarded-Proto to https when terminating SSL
#         proxy_set_header X-Forwarded-Proto https;

#         # Optional but recommended: Add WebSocket support if needed by your apps
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";

#         # Optional but recommended: Adjust proxy timeouts and buffer sizes
#         proxy_connect_timeout 60s;
#         proxy_send_timeout   60s;
#         proxy_read_timeout   60s;
#         proxy_buffer_size    16k;
#         proxy_buffers     4 256k;
#         proxy_busy_buffers_size 256k;
#     }

#     # Error page handling
#     error_page   500 502 503 504  /50x.html;
#     location = /50x.html {
#         root   /usr/share/nginx/html;
#     }
# }